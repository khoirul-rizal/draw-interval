import type { NextPage } from 'next'
import Head from 'next/head'
import Link from 'next/link'
import { useEffect, useState } from 'react'
import styles from '../styles/Home.module.css'

// let timer: number = 0
// let imageURLs: string[] = JSON.parse(sessionStorage.getItem('state') || '')
// let curImageURL: string = ''
interface PromiseResolve<T> {
  status: 'resolved',
  value: T
}

interface PromiseReject<T> {
  status: 'reject',
  value: T
}

type PromiseSettle<T>  = PromiseResolve<T> | PromiseReject<T>

const Activity: NextPage = () => {
  const imageBase: string[] = JSON.parse(sessionStorage.getItem('state') || '')
  const [imageURLs, setImageURL]= useState<string[]>([]) 
  const [timer, setTimer] = useState<number>(0)
  const [curImageURL, setCurImageURL] = useState<string>('')

  const RestartDraw = async() => {
    await setImageURL(imageBase)
  }
  
  const timeListener = () => {
    
      if (timer <= 0) {
        console.log(imageURLs.length)
        if(imageURLs.length == 0) {
          RestartDraw()
        } else {
          setTimer(3)
          const image: string[] = imageURLs
          const splicedImg: string = image.splice(Math.floor(Math.random() * image.length), 1)[0]
          setCurImageURL(splicedImg)
        }
      } else {
        const myTime = timer - 1
        setTimer(myTime)
      }
  }
  useEffect(() => {
    const interval = setInterval(() => {
      timeListener()
    }, 1000)
    return () => clearInterval(interval)
  }, [timer, imageURLs])

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>Timer {timer}</div>
      <img src={curImageURL} />
      <Link href='/' as='/'>Back</Link>
      {}
    </div>
  )
}

export default Activity
