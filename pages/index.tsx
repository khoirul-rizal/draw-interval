import type { NextPage } from 'next'
import Head from 'next/head'
import Link from 'next/link'
import { useEffect, useLayoutEffect, useState } from 'react'
import styles from '../styles/Home.module.css'
import { MantineProvider, Button } from '@mantine/core'

  /*TODO
  1. SOP or REGEX listening SRC IMAGE
  2. Delete Image
  3. Duplicate Image
  4. Input Auto Next
  5. Empty Image
    */

const DragOverListener = (e: any) => {
  e.preventDefault()
}
interface Time {
  minA: number,
  minB: number,
  secA: number,
  secB: number,
}
const Index: NextPage = () => {
  return (
    <MantineProvider
    theme={{
      fontFamily: 'Open Sans, sans serif'
    }}
     >
      <App />
    </MantineProvider>
  )
}
const App: NextPage = () => {
  const [imageURLs, setImageURL] = useState<string[]>([])
  const [time, setTime] = useState<Time>({
    minA: 0,
    minB: 1,
    secA: 0,
    secB: 0
  })
  const DropListener = (e: any) => {
    e.stopPropagation();
    e.preventDefault(); 
    const src: string = e.dataTransfer.getData('text/html')
    if(src.split('class').length === 0) return

    let imgURL: string = ''
    imgURL = src.split('srcset')[1].split('"')[1].split(' ')[6]
    sessionStorage.setItem('state', JSON.stringify([...imageURLs, imgURL]));
    setImageURL([...imageURLs, imgURL])
  }
  const InputFocusSelect = (e: any) => {
    // focus autoselect
  }
  const FormSubmit = (e: any) => {
    e.preventDefault()
  }

  const InputOnChange = (e: any) => {
    const tempTime: Time = {...time, [e.target.id]: e.target.value[1] - 0}
    console.log(tempTime)
    setTime(tempTime)
  }
  useEffect(() => {
    // initiliaze
    if (!imageURLs.length && sessionStorage.getItem('state')) {
      setImageURL(JSON.parse(sessionStorage.getItem('state') || ''))
    } 
  }, [imageURLs])
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        settings
        <form onSubmit={FormSubmit} className={styles['input-time']}>
          <div className={styles['input-time__minutes']}>
            <input 
              onChange={InputOnChange}
              onFocus={InputFocusSelect}
              value={time.minA} id='minA' type='number' /> 
            <input 
              onChange={InputOnChange}
              onFocus={InputFocusSelect}
              value={time.minB}
              id='minB'
              type='number' />
          </div>
          <div className={styles['input-time__colon']}>:</div>
          <div className={styles['input-time__seconds']}>
            <input
              onChange={InputOnChange}
              onFocus={InputFocusSelect}
              value={time.secA}
              id='secA'
              type='number' /> 
            <input
              onChange={InputOnChange}
              onFocus={InputFocusSelect}
              value={time.secB}
              id='secB'
              type='number' />
          </div>
          <Button >Go</Button>
        </form>
      </div>
      <div 
        onDrop={DropListener}
        onDragOver={DragOverListener} 
        className={styles.drag__container}>
          <div className={styles.drag__title}>Drop Your Image Here</div>
          {
            imageURLs.map((url, index) => {
              return <img className={styles.drag__image} src={url} key={index} />
            })
          }
      </div>
    </div>
  )
}

export default Index
